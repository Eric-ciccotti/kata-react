"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
exports.__esModule = true;
var axios_1 = require("axios");
var JsonBox = /** @class */ (function () {
    function JsonBox(jsonboxhost, axiosConfig) {
        if (jsonboxhost === void 0) { jsonboxhost = "https://jsonbox.io"; }
        this.jsonboxhost = jsonboxhost;
        this.axiosConfig = axiosConfig;
    }
    JsonBox.prototype.getUrl = function (boxId, collection, config) {
        if (config === void 0) { config = {
            sort: '-_createdOn', skip: 0, limit: 20
        }; }
        var url = this.jsonboxhost + "/" + boxId;
        var sort = config.sort, skip = config.skip, limit = config.limit, query = config.query;
        if (collection) {
            url = url + "/" + collection;
        }
        var parameters = new Map();
        if (sort) {
            parameters.set("sort", sort);
        }
        if (skip) {
            parameters.set("skip", skip);
        }
        if (limit) {
            parameters.set("limit", limit);
        }
        if (query) {
            parameters.set("q", query);
        }
        if (parameters.size > 0) {
            url = url + "?" + __spread(parameters.keys()).map(function (key) { return key + "=" + parameters.get(key); }).join('&');
        }
        return url;
    };
    JsonBox.prototype.getRecordId = function (data) {
        return Array.isArray(data) ? data.map(function (record) { return record[JsonBox.RECORD_ID_KEY]; }) : data[JsonBox.RECORD_ID_KEY];
    };
    JsonBox.prototype.read = function (boxId, collection, config) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1["default"].get(this.getUrl(boxId, collection, config), this.axiosConfig)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.status === 200 ? response.data : false];
                }
            });
        });
    };
    JsonBox.prototype.create = function (data, boxId, collection) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1["default"].post(this.getUrl(boxId, collection), data, this.axiosConfig)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.status === 200 ? response.data : false];
                }
            });
        });
    };
    JsonBox.prototype.update = function (data, boxId, recordId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1["default"].put(this.getUrl(boxId, recordId), data, this.axiosConfig)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.status === 200 ? response.data : false];
                }
            });
        });
    };
    JsonBox.prototype["delete"] = function (boxId, recordId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1["default"]["delete"](this.getUrl(boxId, recordId), this.axiosConfig)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.status === 200 ? response.data : false];
                }
            });
        });
    };
    JsonBox.prototype.deleteMany = function (boxId, recordIds) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, recordIds.map(function (id) { return _this["delete"](boxId, id); })];
            });
        });
    };
    JsonBox.RECORD_ID_KEY = "_id";
    return JsonBox;
}());
exports.JsonBox = JsonBox;
